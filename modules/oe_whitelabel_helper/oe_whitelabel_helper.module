<?php

/**
 * @file
 * The OE Whitelabel Helper module.
 */

declare(strict_types = 1);

use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_locale_translation_projects_alter().
 */
function oe_whitelabel_helper_locale_translation_projects_alter(&$projects) {
  $projects['oe_whitelabel_helper']['info']['interface translation server pattern'] = drupal_get_path('module', 'oe_whitelabel_helper') . '/translations/%project-%language.po';
}

/**
 * Implements hook_theme().
 */
function oe_whitelabel_helper_theme($existing, $type, $theme, $path) {
  return [
    'oe_whitelabel_helper_address_inline' => [
      'variables' => [
        'address' => NULL,
        'address_items' => [],
        'address_delimiter' => NULL,
      ],
    ],
    'oe_corporate_blocks_neutral_footer' => [
      'variables' => [
        'corporate_footer' => [],
        'site_specific_footer' => [],
      ],
      'preprocess functions' => [
        'oe_corporate_blocks_preprocess_set_site_owner',
      ],
    ],
  ];
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function oe_whitelabel_helper_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, array $form, FormStateInterface $form_state) {
  $element = [];

  if ($view_mode !== 'oe_w_pattern_gallery_item') {
    return $element;
  }

  $element['pattern_mapping'] = [
    '#type' => 'select',
    '#title' => t('Use this field for'),
    '#options' => [
      'caption_title' => t('Caption title'),
      'caption' => t('Caption'),
      'thumbnail' => t('Thumbnail'),
      'media' => t('Media'),
    ],
    '#empty_value' => '',
    '#default_value' => $plugin->getThirdPartySetting('oe_whitelabel_helper', 'pattern_mapping', ''),
  ];

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function oe_whitelabel_helper_field_formatter_settings_summary_alter(array &$summary, array $context) {
  if ($context['view_mode'] !== 'oe_w_pattern_gallery_item') {
    return;
  }

  $mapping = $context['formatter']->getThirdPartySetting('oe_whitelabel_helper', 'pattern_mapping');
  if ($mapping) {
    // @todo We should show labels.
    $summary[] = t('Gallery pattern: mapped to @field.', [
      '@field' => $mapping,
    ]);
  }
}

/**
 * Implements hook_entity_display_build_alter().
 */
function oe_whitelabel_helper_entity_display_build_alter(&$build, $context) {
  $entity = $context['entity'];

  foreach (Element::children($build) as $field_name) {
    $element = &$build[$field_name];

    if (!isset($element['#theme']) || $element['#theme'] !== 'field' || !isset($element['#field_name'])) {
      continue;
    }

    // @todo Is it safe to use the loop key as field name, instead of looking
    //   inside the field array definition?
    $field_definition = $entity->getFieldDefinition($element['#field_name']);
    if ($field_definition instanceof ThirdPartySettingsInterface) {
      $display_label = $field_definition->getThirdPartySetting('field_display_label', 'display_label');
      if (isset($display_label) && !empty($display_label)) {
        $element['#title'] = $display_label;
      }
    }
  }
}

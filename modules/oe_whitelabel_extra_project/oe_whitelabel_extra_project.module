<?php

/**
 * @file
 * OE Whitelabel theme extra project.
 */

declare(strict_types =  1);

use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Template\Attribute;
use Drupal\media\MediaInterface;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\media\Plugin\media\Source\OEmbed;
use Drupal\oe_bootstrap_theme\ValueObject\ImageValueObject;

/**
 * Implements hook_preprocess_HOOK() for "pattern_description_list".
 *
 * Adds a bottom border for some instances of this pattern that are used in
 * field groups on the project detail page.
 */
function oe_whitelabel_extra_project_preprocess_pattern_description_list(array &$variables): void {
  /** @var \Drupal\ui_patterns\Element\PatternContext $context */
  $context = $variables['context'];
  if ($context->getType() === 'field_group') {
    $id = $context->getProperty('entity_type')
      . '.' . $context->getProperty('bundle')
      . '.' . $context->getProperty('view_mode')
      . '.' . $context->getProperty('group_name');
    switch ($id) {
      case 'oe_organisation.oe_cx_project_stakeholder.default.group_info':
      case 'node.oe_project.full.group_project_details':
      case 'node.oe_project.full.group_coordinators':
      case 'node.oe_project.full.group_period':
      case 'node.oe_project.full.group_budget':
      case 'node.oe_project.full.group_website':
        /** @var \Drupal\Core\Template\Attribute $attributes */
        $attributes = $variables['attributes'];
        $attributes->addClass('border-bottom');
        break;
    }
  }
}

/**
 * Implements hook_preprocess_node() for the project full view mode.
 */
function oe_whitelabel_extra_project_preprocess_node__oe_project__full(array &$variables): void {
  _oe_whitelabel_extra_project_preprocess_inpage_nav($variables);
  _oe_whitelabel_extra_project_preprocess_status_and_progress($variables);
}

/**
 * Implements hook_preprocess_node() for the project content banner view mode.
 */
function oe_whitelabel_extra_project_preprocess_node__oe_project__oe_w_content_banner(array &$variables): void {
  _oe_whitelabel_extra_project_preprocess_featured_media($variables);
}

/**
 * Implements hook_preprocess_node() for the project teaser.
 */
function oe_whitelabel_extra_project_preprocess_node__oe_project__teaser(array &$variables): void {
  _oe_whitelabel_extra_project_preprocess_featured_media($variables);
}

/**
 * Creates an image value object in $variables['image'].
 *
 * @param array $variables
 *   Variables from hook_preprocess_node().
 */
function _oe_whitelabel_extra_project_preprocess_featured_media(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Bail out if there is no media present.
  if ($node->get('oe_featured_media')->isEmpty()) {
    return;
  }

  /** @var \Drupal\media\Entity\Media $media */
  $media = $node->get('oe_featured_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct media translation.
  /** @var \Drupal\media\Entity\Media $media */
  $media = \Drupal::service('entity.repository')->getTranslationFromContext($media, $node->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability = CacheableMetadata::createFromRenderArray($variables);
  $cacheability->addCacheableDependency($media);

  // Run access checks on the media entity.
  $access = $media->access('view', $variables['user'], TRUE);
  $cacheability->addCacheableDependency($access);
  if (!$access->isAllowed()) {
    $cacheability->applyTo($variables);
    return;
  }

  // Get the media source.
  $source = $media->getSource();

  if (!$source instanceof OEmbed && !$source instanceof Image) {
    // Media is not a video or image, no thumbnail will be shown.
    $cacheability->applyTo($variables);
    return;
  }

  /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $thumbnail */
  $thumbnail = $media->get('thumbnail')->first();
  $variables['image'] = ImageValueObject::fromImageItem($thumbnail);

  $cacheability->applyTo($variables);
}

/**
 * Helper function to preprocess the inpage navigation pattern fields.
 *
 * @param array $variables
 *   Variables from hook_preprocess_node().
 */
function _oe_whitelabel_extra_project_preprocess_inpage_nav(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $variables['inpage_navigation_links'] = [];

  $fields = [
    'oe_summary',
    'oe_cx_objective',
    'oe_cx_impacts',
    'oe_cx_lead_contributors',
    'oe_project_participants',
    'oe_cx_achievements_and_milestone',
  ];
  foreach ($variables['content'] as &$item) {
    if (!array_key_exists('#field_name', $item)) {
      continue;
    }

    if (!in_array($item['#field_name'], $fields)) {
      continue;
    }

    $unique_id = Html::getUniqueId('oe-project--' . $item['#field_name']);
    $item['#inpage_nav_id'] = $unique_id;
    $variables['inpage_navigation_links'][] = [
      'path' => '#' . $unique_id,
      'label' => $node->{$item['#field_name']}->getFieldDefinition()->getLabel(),
    ];
  }
}

/**
 * Adds variables for the project status.
 *
 * @param array $variables
 *   Variables from hook_preprocess_node().
 */
function _oe_whitelabel_extra_project_preprocess_status_and_progress(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  /** @var \Drupal\datetime_range\Plugin\Field\FieldType\DateRangeItem|null $date_range_item */
  $date_range_item = $node->get('oe_project_dates')->first();
  if ($date_range_item === NULL) {
    return;
  }
  $status_keys = ['planned', 'ongoing', 'closed'];
  $status_labels = [t('Planned'), t('Ongoing'), t('Closed')];

  if (!$date_range_item->value || !$date_range_item->end_value) {
    // One of the fields is empty.
    return;
  }

  // Dates only store the date, not the time.
  // Use the site-wide configured timezone, not a user-specific timezone.
  /* @see \Drupal\system\TimeZoneResolver::getTimeZone() */
  /** @var string $timezone */
  $timezone = \Drupal::config('system.date')->get('timezone.default') ?? 'UTC';
  $get_timestamp = static function (string $date_string) use ($timezone): int {
    return (new DrupalDateTime($date_string, $timezone))->getTimestamp();
  };
  // Project starts at the beginning of the first day at 00:00.
  $t_start = $get_timestamp($date_range_item->value);
  // Project ends at the end of the last day at 24:00.
  $t_end = $get_timestamp($date_range_item->end_value . ' +1 day');

  if ($t_start >= $t_end) {
    // Cannot show a progress bar if start and end timestamp are the same.
    return;
  }

  $t_now = \Drupal::time()->getCurrentTime();
  $status_id = ($t_now > $t_start) + ($t_now > $t_end);
  $progress_01 = max(0, min(1, ($t_now - $t_start) / ($t_end - $t_start)));
  $variables['project_status_args'] = [
    'status' => $status_keys[$status_id],
    'start_date' => $date_range_item->value,
    'start_label' => t('Start'),
    'end_date' => $date_range_item->end_value,
    'end_label' => t('End'),
    'label' => t('Status'),
    'badge' => $status_labels[$status_id],
    // Steps of 0.5 are smaller than a pixel, without too many decimals.
    'progress' => round($progress_01 * 200) / 2,
    'attributes' => new Attribute([
      'data-start-timestamp' => $t_start,
      'data-end-timestamp' => $t_end,
      'data-status-labels' => implode('|', $status_labels),
      // Hide for non-js users, to avoid showing wrong/outdated information.
      'class' => ['d-none'],
    ]),
  ];
}
